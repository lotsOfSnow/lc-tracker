@attribute [Route(Routes.CreateAttempt)]
@using LcTracker.Core.Storage
@using LcTracker.Core.Auth
@using LcTracker.Core.Features.Attempts
@using LcTracker.Shared.Time
@using System.ComponentModel.DataAnnotations

@inject AppDbContext DbContext;
@inject IGetCurrentUserId GetCurrentUser;
@inject NavigationManager Navigation
@inject IAppClock AppClock;

<PageTitle>Create attempt</PageTitle>

<h1>Create attempt</h1>

<EditForm Model="Model" OnValidSubmit="Submit">
    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <div>
        <label>
            Problem Id
            <InputText @bind-Value="Model.ProblemId"/>
        </label>
    </div>

    <div>

        <label>
            Minutes spent
            <InputNumber @bind-Value="Model.MinutesSpent"/>
        </label>
    </div>

    <div>
        <button type="submit">Submit</button>
    </div>

    @if (_error is not null)
    {
        <div>
            @_error
        </div>
    }
</EditForm>

@code {

    [SupplyParameterFromForm]
    private CreateModel Model { get; set; } = new();

    private string? _error;

    private async Task Submit()
    {
        _error = null;

        try
        {

            var now = AppClock.Now;
            var userId = GetCurrentUser.Execute();

            var attempt = new Attempt()
            {
                ProblemId = Guid.Parse(Model.ProblemId),
                Date = now,
                PerceivedDifficulty = Difficulty.Easy,
                HasSolved = true,
                IsRecap = false,
                MinutesSpent = Model.MinutesSpent.Value,
                HasUsedHelp = false,
                Note = "",
                AppUserId = userId,
            };

            await DbContext.Attempts.AddAsync(attempt);

            await DbContext.SaveChangesAsync();

            Navigation.NavigateTo(Routes.Attempts);
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
    }

    private class CreateModel
    {
        [Required]
        [StringLength(100)]
        public string? ProblemId { get; set; }

        [Required]
        public int? MinutesSpent { get; set; }
    }
}
