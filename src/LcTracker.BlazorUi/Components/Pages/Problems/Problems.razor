@attribute [Route(Routes.Problems)]
@using LcTracker.Core.Storage
@using LcTracker.Core.Features.Attempts
@using LcTracker.Core.Auth
@using Microsoft.EntityFrameworkCore
@attribute [StreamRendering]
@inject AppDbContext DbContext;
@inject IGetCurrentUserId GetCurrentUser;
@inject NavigationManager Navigation

<PageTitle>Problems</PageTitle>

<h1>Problems</h1>

<button class="btn btn-primary" @onclick='() => Navigation.NavigateTo(Routes.CreateProblem)'>Create</button>

@if (_problems == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Id</th>
            <th>Number</th>
            <th>Name</th>
            <th>Url</th>
            <th>Added at</th>
        </tr>
        </thead>
        <tbody>
            @foreach (var problem in _problems)
            {
                <tr>
                    <td>@problem.Id</td>
                    <td>@problem.Number</td>
                    <td>@problem.Name</td>
                    <td>@problem.Url</td>
                    <td>@problem.AddedAt</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Problem>? _problems;

    protected override async Task OnInitializedAsync()
    {
        var currentUserId = GetCurrentUser.Execute();
        _problems = await DbContext.Problems.Where(x => x.AppUserId == currentUserId).ToListAsync();
    }
}
