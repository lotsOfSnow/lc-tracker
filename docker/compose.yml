version: "3.8"

name: lctracker

services:
  server:
    build:
      context: ../server
      dockerfile: Dockerfile
    ports:
      - ${SERVER_HOST_HTTP_PORT}:${SERVER_CONTAINER_HTTP_PORT}
      - ${SERVER_HOST_HTTPS_PORT}:${SERVER_CONTAINER_HTTPS_PORT}
    environment:
      - ASPNETCORE_ENVIRONMENT=${SERVER_ENV}
      - Database__ConnectionString=${SERVER_ENV_DATABASE__CONNECTION_STRING}
      - Cors__AllowedOrigin=${SERVER_ENV_CORS__AllowedOrigin}
    depends_on: [pg]

  web:
    build:
      context: ../web
      dockerfile: Dockerfile
      args:
        - VITE_PUBLIC_API_URL=http://server:${SERVER_CONTAINER_HTTP_PORT}
    ports:
      - ${WEB_HOST_HTTP_PORT}:${WEB_CONTAINER_HTTP_PORT}
    environment:
      - ORIGIN=${WEB_ORIGIN}
    depends_on: [server]

  pg:
    image: postgres:16.3
    restart: always
    environment:
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASSWORD}
      POSTGRES_DB: ${PG_DB_NAME}
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - ${PG_HOST_PORT}:${PG_CONTAINER_PORT}

  adminer:
    image: adminer:latest
    restart: always
    ports:
      - "9480:8080"

  backup:
    image: postgres:16.3
    depends_on:
      - pg
    volumes:
      - type: bind
        source: ${BACKUP_TARGET_DIR}
        target: /backup
    command: >
      bash -c "while true; do
        PGPASSWORD=${PG_PASSWORD} pg_dump -h pg -U ${PG_USER} -Fc ${BACKUP_DB_NAME} > /backup/${BACKUP_DB_NAME}-$$(date +%Y-%m-%d-%H-%M-%S).dump
        echo ""Backup done at $$(date +%Y-%m-%d_%H:%M:%S)""
        sleep ${BACKUP_SECONDS_TIMEOUT}
      done"
    environment:
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASSWORD}

volumes:
  pgdata: